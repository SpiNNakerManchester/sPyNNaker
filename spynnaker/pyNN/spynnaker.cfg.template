[Logging]
# ------
# Logging levels are as specified for the Python logging module.
# Listing a module below overrides the default logging level for that module
# and its children (unless they are also overridden).
#
# e.g., the following sample would set the default level to info, but display
# debug messages for pacman103.front.pynn, and only display warning messages
# for pacman.core
#
#     default = info
#     debug = front.pynn
#     info =
#     warning = core
#     error =
#     critical =
#
# The ```instantiate``` option determines whether front-ends set up loggers.
# If ```instantiate``` is True then users do not need to set up their own
# loggers.  If it is False, then users need to instantiate a logger at the top
# of each script, this is simply achieved by inserting the following lines at
# the top of the file.
#
#    include logging
#    logger = logging.basicConfig()
#
instantiate = True
default = info
debug =
info =
warning =
error =
critical =

[Reports]
# If reportsEnabled is false, no text reports are written.
# writeTextSpecs: If True, produce text version of each Data Spec,
#                 in reports/dataSpec directory
# writeRouterReports: If True, each router file is written in
#                 text format to reports/routers
reportsEnabled = True
writeSynapticReport = False
writeTextSpecs = False
writePartitionerReports = True
writeApplicationGraphPlacerReport = True
writeMachineGraphPlacerReport = False
writeRouterReports = False
writeRouterInfoReport = True
writeRoutingTableReports = True
writeRoutingTablesFromMachineReport = True
writeMemoryMapReport = False
writeNetworkSpecificationReport = True
writeProvenanceData = True
writeTagAllocationReports = True
writeAlgorithmTimings = True
# Note: graphviz is required to draw the graph
draw_network_graph = False
writeReloadSteps = False
# options are DEFAULT (hard coded location) or a file path
defaultReportFilePath = DEFAULT
# options are DEFAULT, TEMP, or a file path
#NOTE ***that for bespoke file paths, folders will not be automatically deleted***
defaultApplicationDataFilePath = DEFAULT
max_reports_kept = 10
max_application_binaries_kept = 10
provenance_format = xml
display_algorithm_timings = True
extract_iobuf = False
extract_iobuf_during_run = True
extract_iobuf_from_cores = ALL
extract_iobuf_from_binary_types = None
clear_iobuf_during_run = True


[Simulation]
# Maximum spikes per second of any neuron (spike rate in Hertz)
spikes_per_second = 30

# The number of standard deviations from the mean to account for in
# the ring buffer in terms of how much safety in precision vs overflowing the
# end user is willing to risk
ring_buffer_sigma = 5

# The amount of space to reserve for incoming spikes
incoming_spike_buffer_size = 256

[Machine]
#-------
# Information about the target SpiNNaker board or machine:
# machineName: The name or IP address of the target board
# down_cores: Cores that are not working
# down_chips: Chips that are not working
# core_limit: The maximum number of cores to use on the board
# machineTimeStep: Internal time step in simulations in u_secs)
# timeScaleFactor: Change this to slow down the simulation time
#                  relative to real time.
# appID:           Used by sark to identify the user's application.
machine_spec_file = None

machineName = None
version = None

remote_spinnaker_url = None

spalloc_server = None
spalloc_port = 22244
spalloc_user = None
spalloc_machine = None

virtual_board = False
requires_wrap_arounds = None

# format is:
#    down_cores = <down_core_id>[:<down_core_id]*
#    <down_core_id> = <chip_x>,<chip_y>,<core_id>
#    down_chips = <down_chip_id>[:<down_chip_id]*
#    <down_chip_id> = <chip_x>,<chip_y>
# where:
#    <chip_x> is the x-coordinate of a down chip
#    <chip_y> is the y-coordinate of a down chip
#    <core_id> is the virtual core id of a core
down_cores = None
down_chips = None
down_links = None
core_limit = None
machineTimeStep = 1000
timeScaleFactor = None
appID = 30
DSEAppID = 31
tryReboot = True

# format is:
#     bmp_names     = <bmp_id>[:<bmp_id>]*
#     <bmp_id>      = [[<cabinet_id>;]<frame_id>;]<host>[/(<board-range>|board_id[,board_id]*)]
#     <board_range> = <board_id>-<board_id>
# where:
#     <cabinet_id> is the id of a cabinet
#     <frame_id> is the id of a frame in a cabinet
#     <host> is the hostname or IP address of the BMP
#     <board_range> is a range of boards that the BMP can speak to
#     <board_id> is the id of a single board in a frame
bmp_names = None
number_of_boards = None
width = None
height = None
scamp_connections_data = None
boot_connection_port_num = None

auto_detect_bmp = False
turn_off_machine = False
use_app_stop = True
clear_routing_tables = False
clear_tags = False
enable_reinjection = True
reset_machine_on_startup = False
post_simulation_overrun_before_error = 5
max_sdram_allowed_per_chip = None

[Mapping]

# Algorithms below - format is  <algorithm_name>,<>
# pacman algorithms are:
# Basic_dijkstra_routing, RadialPlacer, BasicPlacer, ConnectiveBasedPlacer,
# BasicTagAllocator, BasicPartitioner, PartitionAndPlacePartitioner,
# BasicRoutingInfoAllocator, BasicDijkstraRouting,
# MallocBasedRoutingInfoAllocator, GraphEdgeFilter, EdgeToNKeysMapper

# These algorithms should be run
application_to_machine_graph_algorithms = PartitionAndPlacePartitioner
machine_graph_to_machine_algorithms = GraphEdgeFilter,OneToOnePlacer,RigRoute,BasicTagAllocator,FrontEndCommonEdgeToNKeysMapper,MallocBasedRoutingInfoAllocator,BasicRoutingTableGenerator,MundyOnChipRouterCompression

# format is <path1>,<path2>
extra_xmls_paths = None

[SpecExecution]
#-------------
# specExecOnHost: If True, execute specs on host then download to SpiNNaker
#                 False not yet support, where specs are downloaded
#                 to SpiNNaker and then executed.
specExecOnHost = True

[MasterPopTable]
# algorithm: {2dArray, BinarySearch, HashTable}
generator = BinarySearch
#generator = 2dArray

[Recording]
#---------

# Uncomment the following to change from the defaults
live_spike_port = 17895
live_spike_host = 0.0.0.0

[Buffers]
# Host and port on which to receive buffer requests
receive_buffer_port = None
receive_buffer_host = 0.0.0.0

# Buffered recording can be enabled below.  Note that spike source array
# recording is always buffered.
enable_buffered_recording = False

# These values can be adjusted to set the maximum amount of SDRAM per core
# that will be used for the various neuron parameters to be recorded.  This
# will affect how many neurons can fit on a chip.
spike_buffer_size = 1048576
v_buffer_size = 1048576
gsyn_buffer_size = 2097152

# Advanced parameters to further control buffering
buffer_size_before_receive = 16384
time_between_requests = 50

use_auto_pause_and_resume = True
minimum_buffer_sdram = 1048576

[Mode]
#mode = Production or Debug
mode = Production
verify_writes = False
violate_1ms_wall_clock_restriction = False

[Database]
create_database = None
wait_on_confirmation = True
send_start_notification = True
send_stop_notification = True
create_routing_info_to_neuron_id_mapping = True
listen_port = None
notify_port = 19999
notify_hostname = localhost
