[Logging]
# ------
# Logging levels are as specified for the Python logging module.
# Listing a module below overrides the default logging level for that module
# and its children (unless they are also overridden).
#
# e.g., the following sample would set the default level to info, but display
# debug messages for pacman103.front.pynn, and only display warning messages
# for pacman.core
#
#     default = info
#     debug = front.pynn
#     info =
#     warning = core
#     error =
#     critical =
#
# The ```instantiate``` option determines whether front-ends set up loggers.
# If ```instantiate``` is True then users do not need to set up their own
# loggers.  If it is False, then users need to instantiate a logger at the top
# of each script, this is simply achieved by inserting the following lines at
# the top of the file.
#
#    include logging
#    logger = logging.basicConfig()
#
instantiate = True
default = info
debug =
info =
warning =
error =
critical =

[Reports]
# If reportsEnabeld is false, no text reports are written.
# writeTextSpecs: If True, produce text version of each Data Spec,
#                 in reports/dataSpec directory
# writeRouterReports: If True, each router file is written in
#                 text format to reports/routers
reportsEnabled = True
writeTextSpecs = False
writePartitionerReports = True
writePlacerReportWithPartitionable = True
writePlacerReportWithoutPartitionable = False
writeRouterReports = True
writeRouterInfoReport = True
writeRouterDatReport = False
writeTransceiverReport = True
writeMemoryMapReport = True
writeNetworkSpecificationReport = True
writeProvanceData = True
writeTagAllocationReports = True
outputTimesForSections = True
writeReloadSteps = True
# options are DEFAULT (hard coded location) or a file path
defaultReportFilePath = DEFAULT
# options are DEFAULT, TEMP, or a file path
#NOTE ***that for bespoke file paths, folders will not be automatically deleted***
defaultApplicationDataFilePath = DEFAULT
max_reports_kept = 10
max_application_binaries_kept = 10

[Simulation]
# Maximum spikes per second of any neuron (spike rate in Hertz)
spikes_per_second = 30

# The number of standard deviations from the mean to account for in
# the ring buffer in terms of how much safety in precision vs overflowing the
# end user is willing to risk
ring_buffer_sigma = 5

[Machine]
#-------
# Information about the target SpiNNaker board or machine:
# machineName: The name or IP address of the target board
# down_cores: Cores that are not working
# down_chips: Chips that are not working
# core_limit: The maximum number of cores to use on the board
# machineTimeStep: Internal time step in simulations in usecs)
# timeScaleFactor: Change this to slow down the simulation time
#                  relative to real time.
# appID:           Used by sark to identify the user's application.
machine_spec_file = None
machineName     = None

# format is:
#    down_cores = <down_core_id>[:<down_core_id]*
#    <down_core_id> = <chip_x>,<chip_y>,<core_id>
#    down_chips = <down_chip_id>[:<down_chip_id]*
#    <down_chip_id> = <chip_x>,<chip_y>
# where:
#    <chip_x> is the x-coordinate of a down chip
#    <chip_y> is the y-coordinate of a down chip
#    <core_id> is the virtual core id of a core
down_cores = None
down_chips = None
core_limit = 16
machineTimeStep = 1000
timeScaleFactor = None
appID = 30
tryReboot = True
version = None

# format is:
#     bmp_names     = <bmp_id>[:<bmp_id>]*
#     <bmp_id>      = [[<cabinet_id>;]<frame_id>;]<host>[/(<board-range>|board_id[,board_id]*)]
#     <board_range> = <board_id>-<board_id>
# where:
#     <cabinet_id> is the id of a cabinet
#     <frame_id> is the id of a frame in a cabinet
#     <host> is the hostname or IP address of the BMP
#     <board_range> is a range of boards that the BMP can speak to
#     <board_id> is the id of a single board in a frame
bmp_names = None
number_of_boards = None
width = None
height = None
scamp_connections_data = None
boot_connection_port_num = None

virtual_board = False
requires_wrap_arounds = False
auto_detect_bmp = False
turn_off_machine = False
clear_routing_tables = False
clear_tags = False
enable_reinjection = True
reset_machine_on_startup = False

[Mapping]

# format is  <algorithm_name>,<>
# pacman algorithms are:
# Basic_dijkstra_routing, RadialPlacer, BasicPlacer, ConnectiveBasedPlacer,
# BasicTagAllocator, BasicPartitioner, PartitionAndPlacePartitioner,
# BasicRoutingInfoAllocator, BasicDijkstraRouting,
# MallocBasedRoutingInfoAllocator, GraphEdgeFilter, EdgeToNKeysMapper
algorithms = MallocBasedChipIDAllocator,BasicDijkstraRouting,RadialPlacer,BasicTagAllocator,PartitionAndPlacePartitioner,MallocBasedRoutingInfoAllocator,GraphEdgeFilter,EdgeToNKeysMapper,SpynnakerDatabaseWriter
# format is <path1>,<path2>
extra_xmls_paths = None

[SpecExecution]
#-------------
# specExecOnHost: If True, execute specs on host then download to SpiNNaker
#                 False not yet support, where specs are downloaded
#                 to SpiNNaker and then executed.
specExecOnHost = True

[MasterPopTable]
# algorithm: {2dArray, BinarySearch, HashTable}
generator = BinarySearch
#generator = 2dArray

[Recording]
#---------

# Uncomment the following to change from the defaults
live_spike_port = 17895
live_spike_host = 0.0.0.0

[Buffers]
receive_buffer_host = 0.0.0.0
min_buffered_memory_size = 12

[Mode]
#mode = Production or Debug
mode = Production
verify_writes = False

[Database]
create_database = None
wait_on_confirmation = True
send_start_notification = True
create_routing_info_to_neuron_id_mapping = True
listen_port = None
notify_port = 19999
notify_hostname = localhost
